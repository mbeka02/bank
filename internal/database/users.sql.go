// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: users.sql

package database

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (user_name, full_name, password , email)
VALUES ($1,$2,$3,$4)
RETURNING user_name, full_name, password, email, created_at, password_changed_at
`

type CreateUserParams struct {
	UserName string
	FullName string
	Password string
	Email    string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.UserName,
		arg.FullName,
		arg.Password,
		arg.Email,
	)
	var i User
	err := row.Scan(
		&i.UserName,
		&i.FullName,
		&i.Password,
		&i.Email,
		&i.CreatedAt,
		&i.PasswordChangedAt,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT user_name, full_name, password, email, created_at, password_changed_at FROM users WHERE user_name=$1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, userName string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, userName)
	var i User
	err := row.Scan(
		&i.UserName,
		&i.FullName,
		&i.Password,
		&i.Email,
		&i.CreatedAt,
		&i.PasswordChangedAt,
	)
	return i, err
}

const getUsers = `-- name: GetUsers :many
SELECT user_name, full_name, password, email, created_at, password_changed_at FROM users
ORDER BY user_name
LIMIT $1
OFFSET $2
`

type GetUsersParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) GetUsers(ctx context.Context, arg GetUsersParams) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.UserName,
			&i.FullName,
			&i.Password,
			&i.Email,
			&i.CreatedAt,
			&i.PasswordChangedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
