// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: transactions.sql

package database

import (
	"context"
)

const createTransaction = `-- name: CreateTransaction :one
INSERT INTO transactions (amount, sender_id, receiver_id)
VALUES ($1,$2,$3)
RETURNING id, amount, sender_id, receiver_id
`

type CreateTransactionParams struct {
	Amount     int64
	SenderID   int64
	ReceiverID int64
}

func (q *Queries) CreateTransaction(ctx context.Context, arg CreateTransactionParams) (Transaction, error) {
	row := q.db.QueryRowContext(ctx, createTransaction, arg.Amount, arg.SenderID, arg.ReceiverID)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.Amount,
		&i.SenderID,
		&i.ReceiverID,
	)
	return i, err
}

const deleteTransaction = `-- name: DeleteTransaction :exec
DELETE FROM transactions WHERE id=$1
`

func (q *Queries) DeleteTransaction(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteTransaction, id)
	return err
}

const getTransaction = `-- name: GetTransaction :one
SELECT id, amount, sender_id, receiver_id FROM transactions WHERE id=$1 LIMIT 1
`

func (q *Queries) GetTransaction(ctx context.Context, id int64) (Transaction, error) {
	row := q.db.QueryRowContext(ctx, getTransaction, id)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.Amount,
		&i.SenderID,
		&i.ReceiverID,
	)
	return i, err
}

const getTransactions = `-- name: GetTransactions :many
SELECT id, amount, sender_id, receiver_id FROM transactions ORDER BY id LIMIT $1 OFFSET $2
`

type GetTransactionsParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) GetTransactions(ctx context.Context, arg GetTransactionsParams) ([]Transaction, error) {
	rows, err := q.db.QueryContext(ctx, getTransactions, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transaction
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.ID,
			&i.Amount,
			&i.SenderID,
			&i.ReceiverID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
